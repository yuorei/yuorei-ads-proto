// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/ads/v1/ads.proto

package adsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yuorei/yuorei-ads-proto/gen/rpc/ads/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdManagementServiceName is the fully-qualified name of the AdManagementService service.
	AdManagementServiceName = "rpc.v1.AdManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdManagementServiceCreateCampaignProcedure is the fully-qualified name of the
	// AdManagementService's CreateCampaign RPC.
	AdManagementServiceCreateCampaignProcedure = "/rpc.v1.AdManagementService/CreateCampaign"
	// AdManagementServiceGetAdVideoProcedure is the fully-qualified name of the AdManagementService's
	// GetAdVideo RPC.
	AdManagementServiceGetAdVideoProcedure = "/rpc.v1.AdManagementService/GetAdVideo"
	// AdManagementServiceWatchCountAdVideoProcedure is the fully-qualified name of the
	// AdManagementService's WatchCountAdVideo RPC.
	AdManagementServiceWatchCountAdVideoProcedure = "/rpc.v1.AdManagementService/WatchCountAdVideo"
	// AdManagementServiceGetDailyWatchCountAdVideoProcedure is the fully-qualified name of the
	// AdManagementService's GetDailyWatchCountAdVideo RPC.
	AdManagementServiceGetDailyWatchCountAdVideoProcedure = "/rpc.v1.AdManagementService/GetDailyWatchCountAdVideo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	adManagementServiceServiceDescriptor                         = v1.File_rpc_ads_v1_ads_proto.Services().ByName("AdManagementService")
	adManagementServiceCreateCampaignMethodDescriptor            = adManagementServiceServiceDescriptor.Methods().ByName("CreateCampaign")
	adManagementServiceGetAdVideoMethodDescriptor                = adManagementServiceServiceDescriptor.Methods().ByName("GetAdVideo")
	adManagementServiceWatchCountAdVideoMethodDescriptor         = adManagementServiceServiceDescriptor.Methods().ByName("WatchCountAdVideo")
	adManagementServiceGetDailyWatchCountAdVideoMethodDescriptor = adManagementServiceServiceDescriptor.Methods().ByName("GetDailyWatchCountAdVideo")
)

// AdManagementServiceClient is a client for the rpc.v1.AdManagementService service.
type AdManagementServiceClient interface {
	// Campaign Management
	CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error)
	// Ad Video
	GetAdVideo(context.Context, *connect.Request[v1.GetAdVideoRequest]) (*connect.Response[v1.GetAdVideoResponseList], error)
	WatchCountAdVideo(context.Context, *connect.Request[v1.WatchCountAdVideoRequest]) (*connect.Response[v1.WatchCountAdVideoResponse], error)
	GetDailyWatchCountAdVideo(context.Context, *connect.Request[v1.AdsViewedPerDaysRequest]) (*connect.Response[v1.AdsViewedPerDaysResponse], error)
}

// NewAdManagementServiceClient constructs a client for the rpc.v1.AdManagementService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adManagementServiceClient{
		createCampaign: connect.NewClient[v1.CreateCampaignRequest, v1.CreateCampaignResponse](
			httpClient,
			baseURL+AdManagementServiceCreateCampaignProcedure,
			connect.WithSchema(adManagementServiceCreateCampaignMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAdVideo: connect.NewClient[v1.GetAdVideoRequest, v1.GetAdVideoResponseList](
			httpClient,
			baseURL+AdManagementServiceGetAdVideoProcedure,
			connect.WithSchema(adManagementServiceGetAdVideoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watchCountAdVideo: connect.NewClient[v1.WatchCountAdVideoRequest, v1.WatchCountAdVideoResponse](
			httpClient,
			baseURL+AdManagementServiceWatchCountAdVideoProcedure,
			connect.WithSchema(adManagementServiceWatchCountAdVideoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDailyWatchCountAdVideo: connect.NewClient[v1.AdsViewedPerDaysRequest, v1.AdsViewedPerDaysResponse](
			httpClient,
			baseURL+AdManagementServiceGetDailyWatchCountAdVideoProcedure,
			connect.WithSchema(adManagementServiceGetDailyWatchCountAdVideoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// adManagementServiceClient implements AdManagementServiceClient.
type adManagementServiceClient struct {
	createCampaign            *connect.Client[v1.CreateCampaignRequest, v1.CreateCampaignResponse]
	getAdVideo                *connect.Client[v1.GetAdVideoRequest, v1.GetAdVideoResponseList]
	watchCountAdVideo         *connect.Client[v1.WatchCountAdVideoRequest, v1.WatchCountAdVideoResponse]
	getDailyWatchCountAdVideo *connect.Client[v1.AdsViewedPerDaysRequest, v1.AdsViewedPerDaysResponse]
}

// CreateCampaign calls rpc.v1.AdManagementService.CreateCampaign.
func (c *adManagementServiceClient) CreateCampaign(ctx context.Context, req *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error) {
	return c.createCampaign.CallUnary(ctx, req)
}

// GetAdVideo calls rpc.v1.AdManagementService.GetAdVideo.
func (c *adManagementServiceClient) GetAdVideo(ctx context.Context, req *connect.Request[v1.GetAdVideoRequest]) (*connect.Response[v1.GetAdVideoResponseList], error) {
	return c.getAdVideo.CallUnary(ctx, req)
}

// WatchCountAdVideo calls rpc.v1.AdManagementService.WatchCountAdVideo.
func (c *adManagementServiceClient) WatchCountAdVideo(ctx context.Context, req *connect.Request[v1.WatchCountAdVideoRequest]) (*connect.Response[v1.WatchCountAdVideoResponse], error) {
	return c.watchCountAdVideo.CallUnary(ctx, req)
}

// GetDailyWatchCountAdVideo calls rpc.v1.AdManagementService.GetDailyWatchCountAdVideo.
func (c *adManagementServiceClient) GetDailyWatchCountAdVideo(ctx context.Context, req *connect.Request[v1.AdsViewedPerDaysRequest]) (*connect.Response[v1.AdsViewedPerDaysResponse], error) {
	return c.getDailyWatchCountAdVideo.CallUnary(ctx, req)
}

// AdManagementServiceHandler is an implementation of the rpc.v1.AdManagementService service.
type AdManagementServiceHandler interface {
	// Campaign Management
	CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error)
	// Ad Video
	GetAdVideo(context.Context, *connect.Request[v1.GetAdVideoRequest]) (*connect.Response[v1.GetAdVideoResponseList], error)
	WatchCountAdVideo(context.Context, *connect.Request[v1.WatchCountAdVideoRequest]) (*connect.Response[v1.WatchCountAdVideoResponse], error)
	GetDailyWatchCountAdVideo(context.Context, *connect.Request[v1.AdsViewedPerDaysRequest]) (*connect.Response[v1.AdsViewedPerDaysResponse], error)
}

// NewAdManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdManagementServiceHandler(svc AdManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adManagementServiceCreateCampaignHandler := connect.NewUnaryHandler(
		AdManagementServiceCreateCampaignProcedure,
		svc.CreateCampaign,
		connect.WithSchema(adManagementServiceCreateCampaignMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adManagementServiceGetAdVideoHandler := connect.NewUnaryHandler(
		AdManagementServiceGetAdVideoProcedure,
		svc.GetAdVideo,
		connect.WithSchema(adManagementServiceGetAdVideoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adManagementServiceWatchCountAdVideoHandler := connect.NewUnaryHandler(
		AdManagementServiceWatchCountAdVideoProcedure,
		svc.WatchCountAdVideo,
		connect.WithSchema(adManagementServiceWatchCountAdVideoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adManagementServiceGetDailyWatchCountAdVideoHandler := connect.NewUnaryHandler(
		AdManagementServiceGetDailyWatchCountAdVideoProcedure,
		svc.GetDailyWatchCountAdVideo,
		connect.WithSchema(adManagementServiceGetDailyWatchCountAdVideoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/rpc.v1.AdManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdManagementServiceCreateCampaignProcedure:
			adManagementServiceCreateCampaignHandler.ServeHTTP(w, r)
		case AdManagementServiceGetAdVideoProcedure:
			adManagementServiceGetAdVideoHandler.ServeHTTP(w, r)
		case AdManagementServiceWatchCountAdVideoProcedure:
			adManagementServiceWatchCountAdVideoHandler.ServeHTTP(w, r)
		case AdManagementServiceGetDailyWatchCountAdVideoProcedure:
			adManagementServiceGetDailyWatchCountAdVideoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdManagementServiceHandler struct{}

func (UnimplementedAdManagementServiceHandler) CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.v1.AdManagementService.CreateCampaign is not implemented"))
}

func (UnimplementedAdManagementServiceHandler) GetAdVideo(context.Context, *connect.Request[v1.GetAdVideoRequest]) (*connect.Response[v1.GetAdVideoResponseList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.v1.AdManagementService.GetAdVideo is not implemented"))
}

func (UnimplementedAdManagementServiceHandler) WatchCountAdVideo(context.Context, *connect.Request[v1.WatchCountAdVideoRequest]) (*connect.Response[v1.WatchCountAdVideoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.v1.AdManagementService.WatchCountAdVideo is not implemented"))
}

func (UnimplementedAdManagementServiceHandler) GetDailyWatchCountAdVideo(context.Context, *connect.Request[v1.AdsViewedPerDaysRequest]) (*connect.Response[v1.AdsViewedPerDaysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.v1.AdManagementService.GetDailyWatchCountAdVideo is not implemented"))
}
